entry: 
    mov @r1 && // register declaraion
    movk ^M @r1 *main (@r5+0_2) @r11 ^@r12 u64
    jmp @r12 u8 ^*main ^@r5 <> ^@r5
    mov ^u64 *block u32 ^u8 M // memory managment for switching priviliges
    ldp u64 (@r3+2) ^@r6
    push @r3 (@r6/3) ^@r1 @r4 ^M
    cmp u32 (u64/0_2) <> // pointer

    mov @r7 ^u64 (u32+2) *main u16 && // main declaration

    push && @r6 ^@r12 @r8 ^u64 (@r5+0_2) ^&& // registers 
    ldp @r3 @r7 @r8 ^<M> ^u8 @r7 @r10
    jmk @r8 (@r6/2) @r9 @r10 // jumps between registers
    @r3 ^@r4 (@r11+0_2) @r5 (*block+0_2) @r5
    lsl u32 @r1 @r6
    cmp (@r7/0_1) <M>
    mov && *main @r5 (@r5+0_1) ^*block (u16/3) ^u32 // rule declaration start 
// cache error

    lsl @r4 ^*main (@r5/0_3) <> @r1



    dw *main (@r8 @r3) ^u16

    ldp ^@r8 @r5
    jmp @r9 M

    dw ^*block u64 @r1 @r7 ^@r12
    ldp (@r11+0_2) @r4 ^@r8 (^u16+0_2) // door 1 compile
    push *block @r9 *main @r6 && @r10 @r8
    movk u32 u8 @r9 @r8 ^M @r3 <M> // door 2 executables

    movk && M

    lsl @r4 (&&+0_2) <M> u8 @r1 ^*main @r1 // main logic
    lsl @r5 @r7 @r6 ^@r1 // registers
    jmk @r10 M @r6 ^<> <> (<M>/3)
    @r12 @r5 @r12 @r10 *block @r7
    jmp @r9 @r3 // jumps between registers

    jmk ^<M> (<>+0_2) @r4 *main // main
    jmp @r1 @r6 u16 (@r11+2) ^@r8 u16

    jmk && @r11 ^@r5 u64

    ldp <M> (@r7+1) @r11 ^u32 ^@r8 @r11 // passtrough declarations

    jmp @r5 (@r7/1) @r12 (u64+1) u8 // access

    lsl u32 @r6 ^u64 && *main (^<M>/1) ^@r9 
    cmp @r12 u8 ^@r11 @r11 ^u8 ^M // main pointers
    cmp u8 ^@r10 @r10 @r5 @r3 (^@r3/0_1) ^@r2
    dw @r2 M (^@r1+2) ^<> @r2

    jmp @r9 (@r2/0_2) // no main
    movk *block <> @r5 ^u32
    cmp *main ^u16 u64
    @r5 @r2 (*main+1) @r12 u64 @r7 (^<M>+1)
    lsl ^@r2 <> // pointer

    ldp ^u16 (@r2/0_2)
    @r7 @r4 ^@r1

    @r1 @r7 @r2 @r8 (@r10+0_1) @r3 ^@r5 //  rule declaration stop

    lsl (&&+1) @r6 (@r8/1) && <> // pointer

    cmp @r2 @r11 @r9 *main // rules declaration in main
    @r1 @r12 (@r7+3) @r5 (@r10+1)
    mov @r2 @r11 u16 ^@r4 @r2 (^u8+2) (^@r6+0_2)
    push @r7 @r3 M u8 <> (u16+0_1) ^@r12 // start

    dw *main @r3 u16 ^@r11 ^u8 (<>/1)
    @r11 u64 M (u16/0_1) && @r3
    lsl <> @r7
    @r1 u16 (u16+1) @r1 M &&
    jmp @r6 @r3 @r8 @r10
    @r12 (@r8/3) @r6 (^u8/2)
    push @r12 @r11 (@r6/3) @r4 ^@r9 @r10 @r2

    ldp @r2 u32 @r12 (u32+3) <> u8
    lsl (^@r6+0_2) *block ^<>

    @r11 (<M>+3) @r8 ^<M> @r8
    push ^u32 ^<M>
    @r11 @r12 @r4
    jmk u16 ^u8 @r7 @r8
    mov (^@r3+2) (@r6/3) ^@r11 u32 @r2 (u32+3)
    ldp *block (@r7/3) @r4 @r1
    jmk @r12 <M>
    @r11 *block ^@r4
    @r1 @r9 ^u32 @r8

    jmp @r6 @r2 *block @r4
    dw (@r1+1) *main u8 ^@r8 ^@r4

    jmp @r6 @r5 (@r9/1)
    lsl u16 u16 @r6
    push @r9 @r6 ^@r9 ^@r12
    @r10 <> @r9 <> <> @r5 @r1
    mov (@r7+0_1) u32 *block @r8

    movk @r12 @r1 u32 @r4
    movk (@r1/1) @r8 @r3 (^@r11/3) @r7 ^@r12 u32
    movk (^u16+0_2) ^@r10 @r11
    push ^@r4 @r7 @r3

    @r7 u16 u32
    @r8 *main <> u16

    dw (@r3+2) <> ^@r12 (@r10/3) u64
    lsl <M> ^@r3 @r12

    movk @r5 @r5

    jmp @r9 <M> @r4
    cmp ^@r2 @r7 (u16+0_2)
    lsl ^@r3 @r12 (@r8/0_1) <M> *main @r2 @r5
    ldp @r10 @r11

    @r9 @r11 (u64/0_1) (@r3+0_1) (@r5/2)
    ldp (<>+0_2) (<>/1) u64 ^u16 @r9 <M> (<M>/0_2)
    @r12 && *block M @r9 M u8

    push @r12 u32 ^@r5 @r3 @r3
    cmp ^&& @r12
    @r3 ^@r10 @r5 (@r12/3) @r9 u64

    jmk ^@r5 u32 (@r9/2) @r6 @r10 u8 ^<M>
    movk (@r12+1) u32

    jmk ^*main (^@r5/0_1) M ^*block u32 ^@r6
    mov (@r5+2) @r8 @r7 (^u16/0_2)
    jmp @r3 (^@r6+3) @r6 @r11

    dw && u8 @r3 (^@r9/1) ^@r8 (<M>/0_1) u32
    @r8 <M> (<>/3) @r10 u8 ^u32 *main
    lsl @r6 @r1

    ldp ^u64 <M> (M+0_2) ^&& @r6 (@r12+0_1)
    jmk @r7 <> && ^u64 (@r9/1) (^&&/2)
    push ^@r1 (@r4/0_2) *block @r2 @r7
    ldp @r2 @r1 @r9 *main u32 @r2
    dw ^@r4 u64
    @r12 @r6 @r6
    jmk (@r7/1) (u64+0_1) (u16/2) ^*block @r4 *main &&

    mov @r11 M @r9 *block @r11 @r8 u8
    lsl (@r12/3) <> u8 ^@r1 *block @r6 u8

    ldp ^@r10 ^@r12 u16

    movk ^M M (u32+0_1)
    jmp <M> @r10 (@r4+0_1) <M>

    @r11 *block ^@r7 ^u32 @r10 u64
    dw @r10 @r3 u64
    movk @r12 ^<M> @r1 (M/0_2) @r4 *main

    mov @r12 @r10 ^@r4 (^@r3+3) (^@r10+0_1) &&
    lsl u16 ^u32 ^u8
    ldp ^<> *block @r2

    cmp u64 @r6 ^@r10 u16
    @r6 @r12 @r11 <>

    @r5 M *main ^u64
    cmp <> <M> (@r11+0_1)

    mov ^u64 ^<M> @r5 u64 @r11 @r9 ^@r1

    movk M @r6
    dw ^M <M> ^@r8 @r1 u8 ^@r7 @r8
    movk (*block+3) @r4 u64 @r3 @r8 (*main+1) ^<>
    ldp <M> <>
    @r7 u16 @r2
    jmk @r2 @r12
    jmk @r5 M @r11 && @r6
    ldp ^@r5 u32 @r9 @r10 @r7

    movk @r3 @r5
    ldp ^&& M @r8
    jmk <M> *block @r5 u8
    movk @r11 && *block @r5 (@r10+3) u16 @r2
    lsl ^@r10 @r8 ^@r1 *block (&&+2)
    jmp u64 @r12 <M> ^@r3

    mov (^*main+1) @r7 @r6

    ldp @r6 @r10 (*main+3) (^@r7/2) ^<M>
    push (@r12/0_2) @r1 ^@r10 @r12 <> @r1 (^<>/1)

    jmp (^M+0_2) ^u32 u8 ^@r11 u16 (*block+1) (@r7+2)

    jmp <M> (^@r12+0_2) ^<M>

    lsl @r5 ^u8
    dw ^@r7 @r3 @r7 @r4
    @r3 @r7 @r11

    @r9 @r11 <M> ^u64 *block @r10
    cmp (@r7/3) @r6 <> @r2 ^*block (@r5/0_2)
    lsl @r4 <> u8 *main M
    mov @r6 <M> *main (u32/0_1) @r10 @r8
    push u16 @r4 ^@r10 ^@r9
    cmp M (<>+0_2) @r3
    cmp @r9 M (*block+1) u8 <M> (u64+3) ^@r8

    push (<M>/3) @r5

    @r12 @r2 ^@r6 ^&& @r6
    @r11 (&&+1) @r2 ^@r10 @r3
    push u16 ^@r6 @r7 ^@r6 (<M>/2) (@r5+0_1) <M>
    jmk @r1 @r3 @r12 ^&& *main (<M>+0_1)
    lsl (M+1) @r1 @r6 @r5 *block

    lsl ^<M> ^u64 @r11 (@r9/1) *block @r12 u32
    mov (^@r4/1) (@r1+1) (@r11+0_1) @r12
    mov u64 u16 @r11
    @r3 u16 *block ^@r2 *block @r5 (@r12+1)

    movk && @r4 u16
    @r9 u8 (<M>/3) ^u64 <> (@r8/2) @r1 ^u32
    ldp ^@r1 @r8 @r5 ^@r10 (@r11/2)

    lsl (@r6+2) @r3 u64 ^u64 u64
    push ^<> @r12 u64
    jmp @r1 u64 M && @r1 ^@r1 *main
    ldp @r10 (^u8/3) *block <>
    lsl @r5 @r11 u32 u8 u16
    @r4 (@r3/2) ^u64 @r2 ^*main u16 ^u8 <M>
    push @r7 (*main+0_2) && @r8 u64 @r2 @r12
    dw @r5 (u8+0_2) (u16+2)
    jmk ^@r2 @r1 u64 @r3 &&
    @r11 u8 @r1 &&
    dw @r2 @r3 @r9
    jmp @r1 @r8 @r11 ^*main @r10
    movk u16 @r4 @r10 @r3 (u64/0_1) @r12 @r5

    jmk ^u8 (*block/3) @r6 u64 ^@r8 <M>
    mov *main @r5 @r9
    jmk @r9 @r11 *main @r4 @r8

    ldp @r8 u32 (@r6+3) @r11 @r5 ^@r5 ^u8

    ldp (@r9/3) M @r2 u16 ^@r5 @r5 ^u64

    @r12 @r7 ^<M>

    @r12 u64 ^@r8 u8 (^@r6/0_2) <M>
    movk @r8 (u16+0_2) @r11 M u16 <M>

    @r3 (*main/3) (@r6+1) <M> u8 @r5 u16
    mov <M> @r3 @r4 ^u16 (@r5/0_1) @r9

    jmk *block @r4 (^<M>/0_2) *main @r10 (M+0_1)
    @r10 @r1 @r12

    ldp u8 <> @r2
    jmp @r3 @r11

    ldp (^u32/2) *block @r11 @r7 *block *main ^*block
    jmk @r2 @r3 ^@r5 @r7 ^u16
    cmp ^u64 (@r7/3) @r8 @r5

    lsl (^u16+0_1) M ^@r8 (^@r5/0_1) @r8
    mov @r4 u8 @r11 ^u16

    push u64 u16 ^&& @r2 @r9 u32 @r5
    lsl @r11 ^<M> @r2 <M>

    ldp @r11 @r4 ^*block

    @r9 u16 (@r11+0_2) u64 u64

    ldp <M> @r9 ^@r2 *main
    jmk @r9 <M> @r6 ^@r10
    dw @r1 @r9 (u64+3)
    jmk @r12 (@r12+0_1) @r11 @r3 ^@r4

    mov u32 u16 ^<> ^u16 @r12 (@r2/0_1)
    mov ^*main @r8 ^*block u8

    push u16 @r11 u32 M ^M
    jmp u32 @r1 (@r6/3)
    ldp u64 u8

    @r4 @r12 ^@r1 *main @r3 @r7 ^u32
    cmp u8 (^@r7/2)
    jmp (@r10/1) @r2

    jmk (@r3+3) @r7 && (@r11/3) ^@r4
    cmp u8 u64 @r1 (@r11/2)
    cmp ^<M> u32 u16 u64 M
    movk <> @r1 u64 *main

    jmp ^@r10 && *main <> @r6 (M+1)
    ldp ^@r1 *block *main @r7 @r11
    jmp ^@r12 @r5 @r7 ^<M> ^@r3 @r10
    ldp (@r3/1) @r1 @r4 (^@r2/1)
    @r5 @r6 @r7 *main <>
    ldp @r9 ^@r9 (@r4+2) @r3 && ^@r8 @r9
    lsl (*block/3) u64 M u32

