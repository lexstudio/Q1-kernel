entry: 
    mov @r1 && // register declaraion
    movk ^M @r1 *main (@r5+0_2) @r11 ^@r12 u64
    jmp @r12 u8 ^*main ^@r5 <> ^@r5
    mov ^u64 *block u32 ^u8 M // memory managment for switching priviliges
    ldp u64 (@r3+2) ^@r6
    push @r3 (@r6/3) ^@r1 @r4 ^M
    cmp u32 (u64/0_2) <> // pointer

    mov @r7 ^u64 (u32+2) *main u16 && // main declaration

    push && @r6 ^@r12 @r8 ^u64 (@r5+0_2) ^&& // registers 
    ldp @r3 @r7 @r8 ^<M> ^u8 @r7 @r10
    jmk @r8 (@r6/2) @r9 @r10 // jumps between registers
    @r3 ^@r4 (@r11+0_2) @r5 (*block+0_2) @r5
    lsl u32 @r1 @r6
    cmp (@r7/0_1) <M>
    mov && *main @r5 (@r5+0_1) ^*block (u16/3) ^u32 // rule declaration start 
// cache error

    lsl @r4 ^*main (@r5/0_3) <> @r1



    dw *main (@r8 @r3) ^u16

    ldp ^@r8 @r5
    jmp @r9 M

    dw ^*block u64 @r1 @r7 ^@r12
    ldp (@r11+0_2) @r4 ^@r8 (^u16+0_2) // door 1 compile
    push *block @r9 *main @r6 && @r10 @r8
    movk u32 u8 @r9 @r8 ^M @r3 <M> // door 2 executables

    movk && M

    lsl @r4 (&&+0_2) <M> u8 @r1 ^*main @r1 // main logic
    lsl @r5 @r7 @r6 ^@r1 // registers
    jmk @r10 M @r6 ^<> <> (<M>/3)
    @r12 @r5 @r12 @r10 *block @r7
    jmp @r9 @r3 // jumps between registers

    jmk ^<M> (<>+0_2) @r4 *main // main
    jmp @r1 @r6 u16 (@r11+2) ^@r8 u16

    jmk && @r11 ^@r5 u64

    ldp <M> (@r7+1) @r11 ^u32 ^@r8 @r11 // passtrough declarations

    jmp @r5 (@r7/1) @r12 (u64+1) u8 // access

    lsl u32 @r6 ^u64 && *main (^<M>/1) ^@r9 
    cmp @r12 u8 ^@r11 @r11 ^u8 ^M // main pointers
    cmp u8 ^@r10 @r10 @r5 @r3 (^@r3/0_1) ^@r2
    dw @r2 M (^@r1+2) ^<> @r2

    jmp @r9 (@r2/0_2) // no main
    movk *block <> @r5 ^u32
    cmp *main ^u16 u64
    @r5 @r2 (*main+1) @r12 u64 @r7 (^<M>+1)
    lsl ^@r2 <> // pointer

    ldp ^u16 (@r2/0_2)
    @r7 @r4 ^@r1

    @r1 @r7 @r2 @r8 (@r10+0_1) @r3 ^@r5 //  rule declaration stop

    lsl (&&+1) @r6 (@r8/1) && <> // pointer

    cmp @r2 @r11 @r9 *main // rules declaration in main
    @r1 @r12 (@r7+3) @r5 (@r10+1)
    mov @r2 @r11 u16 ^@r4 @r2 (^u8+2) (^@r6+0_2)
    push @r7 @r3 M u8 <> (u16+0_1) ^@r12 // start

    dw *main @r3 u16 ^@r11 ^u8 (<>/1)
    @r11 u64 M (u16/0_1) && @r3
    lsl <> @r7
    @r1 u16 (u16+1) @r1 M &&
    jmp @r6 @r3 @r8 @r10
    @r12 (@r8/3) @r6 (^u8/2)
    push @r12 @r11 (@r6/3) @r4 ^@r9 @r10 @r2

    ldp @r2 u32 @r12 (u32+3) <> u8
